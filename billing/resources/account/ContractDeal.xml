<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://code.alibabatech.com/schema/dubbo
	http://code.alibabatech.com/schema/dubbo/dubbo.xsd
	 http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
     http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.1.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

<!-- 
	<import resource="./uda.xml" />
	 -->
	 
	 <dubbo:application name="contract" />
	 <dubbo:registry  address="zookeeper://172.168.1.218:2181" />
	 <dubbo:protocol name="dubbo" port="-1" dispather="message" threadpool="fixed" threads="24" />
	 
	 <dubbo:reference id="accountProcess" interface="com.tydic.beijing.billing.account.service.AccountProcess" check="true"/>
	 
	 
	<import resource="./InstContract.xml" />

	<bean id="db" class="com.tydic.beijing.billing.account.biz.ContractDb" scope="prototype">
	</bean>
	
	<bean id="present" class="com.tydic.beijing.billing.account.service.impl.DealContractService" scope="prototype">
	    <property name="db" ref="db"/>
		<property name="presentProcess" ref="presentProcess" />
		<property name="accountProcess" ref="accountProcess"/>
	</bean>
	
 	<bean id="presentProcess" class="com.tydic.beijing.billing.account.service.impl.DealContractServiceProcess" scope="prototype">
	    <property name="db" ref="db"/>
		<property name="ipb" ref="createAccountBook"/>
		<property name="bco" ref="balanceChangeOps"/>
		<property name="channelId" value="ContractChannelId" />
		<property name="externalSystemId" value="ContractExternalSystemId"/>
		<property name="staffId" value="25"/>
	</bean>
	
	<!-- 
	<bean id="inst" class="com.tydic.beijing.billing.account.service.impl.InstContractServiceImpl" scope="prototype">
		<property name="db" ref="db"/>
	</bean>
	 -->
	
	<bean id="dSBalanceType"
		class="com.tydic.beijing.billing.account.datastore.DSBalanceType"  scope="prototype"/>

	<bean id="createAccountBookOps"
		class="com.tydic.beijing.billing.account.biz.CreateAccountBookOps" scope="prototype">
		<property name="balanceTypes" ref="dSBalanceType"></property>
	</bean>

	<bean id="createAccountBook"
		class="com.tydic.beijing.billing.account.service.impl.CreateAccountBookImpl" scope="prototype">
		<property name="ops" ref="createAccountBookOps"></property>
	</bean>
	<bean id="balanceChangeOps"
		class="com.tydic.beijing.billing.account.biz.BalanceChangeOps" scope="prototype" />
	
	
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.tydic.vds.jdbc.VdsDriver" />
		<property name="url"
			value="jdbc:vds:local://classpath?directsql=true&amp;loadxml=true&amp;loaddb=false" />
		<property name="username" value="newbilling" />
		<property name="password" value="newbilling" />
	</bean>
	
	
		<bean class="com.tydic.uda.resolver.mem.MemcachedOperateResolver">
		<property name="memcachedAddress" value="172.168.1.218:12002" />
		<property name="connectionPoolSize" value="1" />
	</bean>
	
	<bean class="com.tydic.uda.service.factory.XmlDataServiceFactory">
		<property name="dataSource" ref="dataSource" />
		<property name="serviceLocations">
			<list>
				<value>classpath:daoservices/*.xml
				</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
    
</beans>
